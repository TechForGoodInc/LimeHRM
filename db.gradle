import org.apache.ibatis.jdbc.ScriptRunner
import org.jooq.Condition
import org.jooq.DSLContext
import org.jooq.SQLDialect
import org.jooq.codegen.GenerationTool
import org.jooq.impl.DSL
import org.jooq.meta.jaxb.Database
import org.jooq.meta.jaxb.Generate
import org.jooq.meta.jaxb.Generator
import org.jooq.meta.jaxb.Jdbc
import org.jooq.meta.jaxb.Target
import org.jooq.meta.postgres.information_schema.InformationSchema

import java.sql.Connection
import java.sql.DriverManager


ext.db = [
        url: 'jdbc:postgresql://localhost:5432/postgres',
        dbmsDriverName: 'postgresql',
        dbmsName: 'postgres',
        user: 'postgres',
        password: 'postgres',
        schema: 'limehrm',
        driver: 'org.postgresql.Driver',
        jooqDbImpl: 'org.jooq.meta.postgres.PostgresDatabase',
        packageName: 'limehrm',
        relativeFilePath: '/src/main/resources/db/creation/create_schema.sql'
]

ext.genpath = new File("${projectDir}/build/generated-src/jooq/main")

buildscript {

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath group: 'org.jooq', name: 'jooq', version: '3.13.4'
        classpath group: 'org.jooq', name: 'jooq-meta', version: '3.13.4'
        classpath group: 'org.jooq', name: 'jooq-codegen', version: '3.13.4'
        classpath group: 'org.postgresql', name: 'postgresql', version: '42.2.16'
        classpath group: 'org.apache.ibatis', name: 'ibatis-core', version: '3.0'
        
    }
}

sourceSets.main.java.srcDirs += genpath.toString()

//

repositories {
    mavenCentral()
}
configurations {
    driver
}
dependencies {
    driver group: 'org.postgresql', name: 'postgresql', version: '42.2.16'
}

task loadJDBCDrivers() {
    URLClassLoader loader = GroovyObject.class.classLoader
    configurations.driver.each {File file ->
        loader.addURL(file.toURI().toURL())
    }
}



task createSchema(dependsOn: loadJDBCDrivers) {
    doLast {
        Connection connection = DriverManager.getConnection(db.url as String, db.user as String, db.password as String)
        if (connection != null) {
            print("Connected to the database!")
        }

        DSLContext create = DSL.using(connection, SQLDialect.valueOf((db.dbmsName as String).toUpperCase()))

        boolean schemaExists = create.selectFrom(InformationSchema.INFORMATION_SCHEMA.SCHEMATA)  // TODO: Postgres Specific
                .where(InformationSchema.INFORMATION_SCHEMA.SCHEMATA.SCHEMA_NAME.eq("limehrm") as Condition)
                .execute() == 1

        if(!schemaExists) {
            print("Generating schema")
            ScriptRunner sr = new ScriptRunner(connection);
            Reader reader = new BufferedReader(new FileReader(System.getProperty("user.dir") + db.relativeFilePath as String));
            sr.runScript(reader);
        }
    }
}

task generateCode() {
    if (!genpath.exists()) {
        genpath.mkdirs()
    }
    
    org.jooq.meta.jaxb.Configuration configuration = new org.jooq.meta.jaxb.Configuration()
            .withJdbc(new Jdbc()
                    .withDriver(db.driver as String)
                    .withUrl(db.url as String)
                    .withUser(db.user as String)
                    .withPassword(db.password as String)
            )
            .withGenerator(new Generator()
                    .withDatabase(new Database()
                            .withName(db.jooqDbImpl as String)
                            .withIncludes(".*")
                            .withExcludes("")
                            .withInputSchema(db.schema as String)
                    )
                    .withGenerate(new Generate()
                            .withPojos(true)
                            .withRecords(true)
                    )
                    .withTarget(new Target()
                            .withPackageName(db.packageName as String)
                            .withDirectory(genpath.toString())
                    )
            )

    GenerationTool.generate(configuration);
    
}

task deleteGeneratedCode(type: Delete) {
    delete genpath
}